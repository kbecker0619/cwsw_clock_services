
"object" design for cwsw library

this is a scratchpad for ideation, not an official design document.
	tab chars: 4

overall background:														{
* coded to C99, primarily because
	* i want to use the standardized scalar types not available in C90
	* i want to be free to use C++-style comments
* however, since VS 2010 doesn't know C99, some things "look" closer to C90
* packaged in one repo, though broken into separate components.
* UT and documentation apply at the package level.
}


timers	{
* concerned about 
  * requiring all sw timers to be global
	* making the timer module to "know" about them, options:
	  * linked list
	  * preset array
	  both options are a bit distasteful. 
	    * a preset number of timers could be done via a compile-time option in a header file, but this requires constant "fiddling" during app development.
    * must solve problem of hvaing module-level timers added to the global list. could be done via a macro intializer, ala the way it was done for TOS (JCI), but i always found that to be kind of distasteful when looking at the code, and anyway they had a tool that created the timers.
  * if allow local, then preventing memory leaks is a huge concern
  * maybe, the idea of "managed" and "normal" sw timers has merit
    * managed timers would be global and registered via an init call or a register call
	* managed: updated by OS scheduler
	* unmanaged: unknown to OS, so not updated
	* managed: must be at least module-global, but can be static. 
		? does this mean a function-local but static timer can be managed?
	* unmg: primarily envisioned to be driven within the module's task function
	* function-local, non-static timers can be created, but extra care must be taken to limit (for example) persistent effects (such as event-handler association) that would become invalid upon function exit
	* managed: no de-registration (?)
	  * no technical reason, but adds a lot of complexity to maintain list of active items
	  * should have a crc or some form of validity check 
	    * should not include dynamic members in crc. primarily concerned about e.g. next-timer links, and if present, previous-timer links
		* a method needs to be available that will allow validity checking of "this" timer - e.g., if a function-local timer goes out of scope, then hopefully its memory will be overwritten "quickly" and the task could tell if the timer was corrupted or valid
		* if valid, then a re-linking of the timers would be done
	
}
